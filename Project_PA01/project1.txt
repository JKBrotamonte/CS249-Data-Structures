#ifndef SET_UTILITIES_H
#define SET_UTILITIES_H

// headers/libraries
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// derived data types
typedef enum { INCREMENTED = 101, ODD, EVEN } DataSelections;
typedef enum { MAX_SET_CAPACITY = 100, MAX_INIT_SET_CAPACITY = 50 } ArrayCapacities;

// prototypes

/*
Name: copyArray
Process: copies one array into other, uses source size
Function Input/Parameters: source array (const int *), source array size (int)                         
Function Output/Parameters: destination array (int *)
Function Output/Returned: none
Device Input/---: none
Device Output/---: none
Dependencies: none
*/
void copyArray( int *dest, const int *source, int sourceSize );
	{
	 // Initialize/Define Variables
	 int index;
	 
	 // loop through array till end of array
	 for(index = 0; index < sourceSize; index++)
		{
		 // Copy source array into dest array
		 dest[index] = source[index];
		}
	 // end loop
	 
	 // return dest array
	 return *dest;
	}

/*
Name: displaySet
Process: displays series of set values, or displays "Empty Set" if no values
Function Input/Parameters: name of set array (const char *),
                           set array (const int *, array size (int)
Function Output/Parameters: none
Function Output/Returned: none
Device Input/---: none
Device Output/monitor: data displayed as specified
Dependencies: printf
*/
void displaySet( const char *setName, const int *setArr, int setArrSize );
	{
	 // Initialize/Define Variables
	 int index;

	 // print set name and skip line
	 printf(*setName\n);

	 // if there are no values display "Empty Set"
	 if(setArrSize == 0)
		{
		 // display "Empty Set"
		 printf("Empty Set");
		}
	 // otherwise loop through array and display the values
	 else
		{
		 // loop through array
		 for(index = 0; index < setArrSize; index++)
			{
			 // display number in array
			 printf(setArr[index]);
			}
		}
	}

/*
Name: findIntersection
Process: finds the set intersection between two set arrays,
         assigns to another array,
         loop to find intersection must end when common value found
Function Input/Parameters: sets one and two arrays (const int *),
                           sets one and two array sizes (int)
Function Output/Parameters: found intersection set array (int *)
Function Output/Returned: size of found intersection set array (int)
Device Input/---: none
Device Output/---: none
Dependencies: none
*/
int findIntersection( int *intersectArray, 
                             const int *oneArray, int oneArrSize, 
                                      const int *otherArray, int otherArrSize );
	{
	 // Initialize/Define Variables
	 int oneIndex;
	 int otherIndex;
	 int index = 0;
	 
	 // Loop through oneArray
	 for(oneIndex = 0; oneIndex < oneArrSize; oneIndex++)
		{
		 // Loop through otherArray
		 for(otherIndex = 0; otherIndex < otherArrSize; otherIndex++)
			{
			 // Check if there is an intersection
			 if(oneArray[oneIndex] == otherArray[otherIndex])
				{
				 // if intersection present, append that value to the intersect array
				 intersectArray[index] = oneArray[oneIndex];
				 
				 // increment index
				 index++;
				}
			}
		}
	 // return intersectArray and size of that array
	 return intersectArray[];
	 return index;
	}

/*
Name: findUnion
Process: finds the set union between two set arrays,
         assigns to another array,
         loop to find union must end when common value found
Function Input/Parameters: sets one and two arrays (const int *),
                           sets one and two array sizes (int)
Function Output/Parameters: none
Function Output/Returned: size of found intersection set array (int)
Device Input/---: none
Device Output/---: none
Dependencies: none
*/
int findUnion( int *unionArray,
                             const int *oneArray, int oneArrSize, 
                                      const int *otherArray, int otherArrSize );
	{
	 // define variables
	 int oneIndex;
	 int otherIndex;
	 int unionIndex;
	 int index = 0;
	 int check;
	 
	 // loop through oneArray
	 for(oneIndex = 0; oneIndex < oneArrSize; oneIndex++)
		{
		 // add all the numbers from the oneArray to the unionArray
		 unionArray[index] = oneArray[oneIndex];

		 // increment index
		 index++;
		}

	 // loop through other array
	 for(otherIndex = 0; otherIndex < otherArrSize; otherIndex++)
		{
		 // set check to 0
		 check = 0;
		 
		 // loop through union array while check == 0
		 while(check == 0)
			{
			 // loop through unionArray;
			 for(unionIndex = 0; unionIndex < index; unionIndex++)
				{
				 // check if number from otherArray has already been added to unionArray
				 if(unionArray[unionIndex] == otherArray[otherIndex])
					{
				 	 // set check equal to 1 to end loop and go to the next value from the otherArray
					 check = 1;
					}
				}
			 // end of loop, thus value hasn't been added yet
			 // add value to unionArray
			 unionArray[index] = otherArray[otherIndex];
			
			 // increment index
			 index++;
			}
		}
	 // end of adding all values to union if need be
	 // return size of union array
	 return index;
	}

/*
Name: initializeSetArray
Process: initializes a set array with all EVEN values, all ODD values,
         or continually INCREMENTED values, 
         depending on the DataSelections constant provided
Function Input/Parameters: start value, number of items (int),
                           data values generation enum (DataSelections)
Function Output/Parameters: initialized set array (int *)
Function Output/Returned: none
Device Input/---: none
Device Output/---: none
Dependencies: none
*/
void initializeSetArray( int *intArray, 
                     int startVal, int numItems, DataSelections dataContained );

/*
Name: isInSet
Process: searches for given value in set array,
         if found, returns true, otherwise returns false,
         must return found result immediately upon finding value
Function Input/Parameters: set array (const int *),
                           size of array (int),
                           search value
Function Output/Parameters: none
Function Output/Returned: Boolean result of test, as specified
Device Input/---: none
Device Output/---: none
Dependencies: none
*/
bool isInSet( const int *setArray, int size, int searchVal );
	{
	 // define variables
	 int index;
	 
	 // loop through array
	 for(index = 0; index < size; index++)
		{
		 // check if seachVal is in array
		 if(setArray[index] == searchVal)
			{
			 // return true
			 return true;
			}
		}
	 // end of loop thus searchVal was not found in setArray
	 // return false
	 return false;
	}

/*
Name: isSubsetOf
Process: compares two set arrays to find if one is a subset of the other,
         returns Boolean result of test,
         loop to find subset item must end when common value found
         and function must return false as soon as a subset value is not found
Function Input/Parameters: two set arrays (const int *),
                           sizes of each set array (int)
Function Output/Parameters: none
Function Output/Returned: Boolean result of test, as specified
Device Input/---: none
Device Output/---: none
Dependencies: none
*/
bool isSubSetOf( const int *oneSet, int oneSetArrSize, 
                          const int *psbleSubset, int psbleSubsetArrSize );
	{
	 // define variables
	 int index;
	 int oneIndex;
	 int psblIndex;

	 // loop through oneSet
	 for(oneIndex = 0; oneIndex < oneSetArrSize; oneIndex++)
		{
		 // loop through psbleSubset
		 for(psbleIndex = 0; psbleIndex < psbleSubsetArrSize; pspleIndex++);
			{
			 // check if values from psblSubset are in oneSet
			 if(psbleSubset[psbleIndex] == oneSet[OneIndex])
				{
				 // increment index
				 index++;
				}
			}
		}
	 // if index is equal to psbleSubsetArrSize then return true
	 // this only works assuming that there are no repeating numbers in either set
	 if(index == psbleSubsetArrSize)
		{
		 // return true
		 return true;
		}
	 // otherwise return false
	 else
		{
		 return false;
		}
	}

#endif     // SET_UTILITIES_H

